{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30886,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/bhumokaggle/pagerank-and-markov-transition-matrix?scriptVersionId=222413660\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\n\ndef make_markov_transition_matrix(A):\n    column_sums = A.sum(axis=0)\n    column_sums[column_sums == 0] = A.shape[0]  # Handle dangling nodes\n    M = A / column_sums  # Normalize columns to sum to 1\n    return M\n\ndef pagerank(A, eps=1e-6):\n    M = make_markov_transition_matrix(A)\n    eigenvalues, eigenvectors = np.linalg.eig(M)\n    principal_eigenvector = eigenvectors[:, np.argmax(eigenvalues)].real\n    pagerank_vector = principal_eigenvector / np.sum(principal_eigenvector)\n    return pagerank_vector\n\nA = np.array([[0,1,0,0,0],[0,0,1,0,0],[1,0,0,1,0],[0,0,0,0,1],[0,0,1,0,0]])\n\n# Calculate PageRank scores\nprint(pagerank(A))\nrs = pagerank(A)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-13T19:42:19.501254Z","iopub.execute_input":"2025-02-13T19:42:19.501623Z","iopub.status.idle":"2025-02-13T19:42:19.510236Z","shell.execute_reply.started":"2025-02-13T19:42:19.501594Z","shell.execute_reply":"2025-02-13T19:42:19.508767Z"}},"outputs":[{"name":"stdout","text":"[0.16666667 0.16666667 0.33333333 0.16666667 0.16666667]\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"import numpy as np\n\nmatrix = np.array([[2,5],[5,13]])\ninverse_matrix = np.linalg.inv(matrix)\nprint(inverse_matrix)\ny=np.array([[1],[2]])\nx = np.array([[1,2],[1,3]])\n#x = np.array([[1,1],[2,3]])\nprint(x.T.dot(x))\nprint(x.T.dot(y\n           ))\nprint(inverse_matrix.dot(x.T.dot(y)))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-13T20:17:51.191932Z","iopub.execute_input":"2025-02-13T20:17:51.192297Z","iopub.status.idle":"2025-02-13T20:17:51.202058Z","shell.execute_reply.started":"2025-02-13T20:17:51.192272Z","shell.execute_reply":"2025-02-13T20:17:51.200853Z"}},"outputs":[{"name":"stdout","text":"[[13. -5.]\n [-5.  2.]]\n[[ 2  5]\n [ 5 13]]\n[[3]\n [8]]\n[[-1.]\n [ 1.]]\n","output_type":"stream"}],"execution_count":35}]}