{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[],"dockerImageVersionId":30805,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# # This Python 3 environment comes with many helpful analytics libraries installed\n# # It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# # For example, here's several helpful packages to load\n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# # Input data files are available in the read-only \"../input/\" directory\n# # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('/kaggle/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# # You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# # You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-28T14:16:47.336968Z","iopub.execute_input":"2025-05-28T14:16:47.337310Z","iopub.status.idle":"2025-05-28T14:16:47.359399Z","shell.execute_reply.started":"2025-05-28T14:16:47.337270Z","shell.execute_reply":"2025-05-28T14:16:47.358603Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nfrom torch.nn import functional as F\nfrom datasets import load_dataset\nimport matplotlib.pyplot as plt\n\n# hyperparameters\nbatch_size = 16  # how many independent sequences will we process in parallel?\nblock_size = 32  # what is the maximum context length for predictions?\nmax_iters = 2000\neval_interval = 100\nlearning_rate = 1e-3\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\neval_iters = 200\nn_embd = 64\nn_head = 4\nn_layer = 4\ndropout = 0.1  # added dropout for better regularization\n\n# Set seed for reproducibility\ntorch.manual_seed(1337)\n\n# Load WikiText-2 dataset (pre-tokenized)\ndataset = load_dataset(\"wikitext\", \"wikitext-2-v1\")\n\n# Use tokenized data\ntrain_text = dataset['train']['text']\nvalid_text = dataset['validation']['text']\n\n# Prepare the vocabulary from the tokenized text\nwords = sorted(set(\" \".join(train_text).split()))\nstoi = {w: i for i, w in enumerate(words)}\nitos = {i: w for i, w in enumerate(words)}\nvocab_size = len(stoi)\n\n# Encode and decode functions\ndef encode(text):\n    \"\"\"Encode a string into a list of integers based on the vocabulary.\"\"\"\n    return torch.tensor([stoi.get(w, stoi['<unk>']) for w in text.split()], dtype=torch.long)\n\ndef decode(tokens):\n    \"\"\"Decode a list of integers back into a string.\"\"\"\n    return \" \".join([itos[t] for t in tokens])\n\n# Encode the dataset\ntrain_data = encode(\" \".join(train_text))\nval_data = encode(\" \".join(valid_text))\n\n# Data loading\ndef get_batch(split):\n    data = train_data if split == \"train\" else val_data\n    ix = torch.randint(len(data) - block_size, (batch_size,))\n    x = torch.stack([data[i:i + block_size] for i in ix])\n    y = torch.stack([data[i + 1:i + block_size + 1] for i in ix])\n    x, y = x.to(device), y.to(device)\n    return x, y\n\n@torch.no_grad()\ndef estimate_loss():\n    out = {}\n    model.eval()\n    for split in ['train', 'val']:\n        losses = torch.zeros(eval_iters)\n        for k in range(eval_iters):\n            X, Y = get_batch(split)\n            logits, loss = model(X, Y)\n            losses[k] = loss.item()\n        out[split] = losses.mean()\n    model.train()\n    return out\n\n# Model Definitions (same as in your code)\nclass Head(nn.Module):\n    \"\"\"One head of self-attention\"\"\"\n\n    def __init__(self, head_size):\n        super().__init__()\n        self.key = nn.Linear(n_embd, head_size, bias=False)\n        self.query = nn.Linear(n_embd, head_size, bias=False)\n        self.value = nn.Linear(n_embd, head_size, bias=False)\n        self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x):\n        B, T, C = x.shape\n        k = self.key(x)  # (B, T, C)\n        q = self.query(x)  # (B, T, C)\n        wei = q @ k.transpose(-2, -1) * C**-0.5\n        wei = wei.masked_fill(self.tril[:T, :T] == 0, float('-inf'))\n        wei = F.softmax(wei, dim=-1)\n        wei = self.dropout(wei)\n        v = self.value(x)\n        out = wei @ v\n        return out\n\nclass MultiHeadAttention(nn.Module):\n    \"\"\"Multiple heads of self-attention in parallel\"\"\"\n\n    def __init__(self, num_heads, head_size):\n        super().__init__()\n        self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])\n        self.proj = nn.Linear(n_embd, n_embd)\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x):\n        out = torch.cat([h(x) for h in self.heads], dim=-1)\n        out = self.dropout(self.proj(out))\n        return out\n\nclass FeedFoward(nn.Module):\n    \"\"\"A simple feedforward network\"\"\"\n\n    def __init__(self, n_embd):\n        super().__init__()\n        self.net = nn.Sequential(\n            nn.Linear(n_embd, 4 * n_embd),\n            nn.ReLU(),\n            nn.Linear(4 * n_embd, n_embd),\n            nn.Dropout(dropout),\n        )\n\n    def forward(self, x):\n        return self.net(x)\n\nclass Block(nn.Module):\n    \"\"\"Transformer block: communication followed by computation\"\"\"\n\n    def __init__(self, n_embd, n_head):\n        super().__init__()\n        head_size = n_embd // n_head\n        self.sa = MultiHeadAttention(n_head, head_size)\n        self.ffwd = FeedFoward(n_embd)\n        self.ln1 = nn.LayerNorm(n_embd)\n        self.ln2 = nn.LayerNorm(n_embd)\n\n    def forward(self, x):\n        x = x + self.sa(self.ln1(x))\n        x = x + self.ffwd(self.ln2(x))\n        return x\n\nclass BigramLanguageModel(nn.Module):\n\n    def __init__(self):\n        super().__init__()\n        self.token_embedding_table = nn.Embedding(vocab_size, n_embd)\n        self.position_embedding_table = nn.Embedding(block_size, n_embd)\n        self.blocks = nn.Sequential(*[Block(n_embd, n_head=n_head) for _ in range(n_layer)])\n        self.ln_f = nn.LayerNorm(n_embd)\n        self.lm_head = nn.Linear(n_embd, vocab_size)\n\n    def forward(self, idx, targets=None):\n        B, T = idx.shape\n        tok_emb = self.token_embedding_table(idx)\n        pos_emb = self.position_embedding_table(torch.arange(T, device=device))\n        x = tok_emb + pos_emb\n        x = self.blocks(x)\n        x = self.ln_f(x)\n        logits = self.lm_head(x)\n\n        if targets is None:\n            loss = None\n        else:\n            B, T, C = logits.shape\n            logits = logits.view(B * T, C)\n            targets = targets.view(B * T)\n            loss = F.cross_entropy(logits, targets)\n\n        return logits, loss\n\n    def generate(self, idx, max_new_tokens):\n        for _ in range(max_new_tokens):\n            idx_cond = idx[:, -block_size:]\n            logits, loss = self(idx_cond)\n            logits = logits[:, -1, :]\n            probs = F.softmax(logits, dim=-1)\n            idx_next = torch.multinomial(probs, num_samples=1)\n            idx = torch.cat((idx, idx_next), dim=1)\n        return idx\n\n# Initialize model\nmodel = BigramLanguageModel().to(device)\noptimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)\n\n# Training loop\ntrain_losses = []\nval_losses = []\n\nfor iter in range(max_iters):\n    if iter % eval_interval == 0 or iter == max_iters - 1:\n        losses = estimate_loss()\n        train_losses.append(losses['train'])\n        val_losses.append(losses['val'])\n        print(f\"step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}\")\n\n    xb, yb = get_batch('train')\n    logits, loss = model(xb, yb)\n    optimizer.zero_grad(set_to_none=True)\n    loss.backward()\n    optimizer.step()\n\n# Plot the training and validation loss curves\nplt.plot(train_losses, label=\"Train Loss\")\nplt.plot(val_losses, label=\"Validation Loss\")\nplt.xlabel(\"Evaluation Step\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()\n\n# Generate text\ncontext = torch.zeros((1, 1), dtype=torch.long, device=device)\nprint(decode(model.generate(context, max_new_tokens=500)[0].tolist()))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-28T14:16:47.361515Z","iopub.execute_input":"2025-05-28T14:16:47.361866Z","iopub.status.idle":"2025-05-28T14:18:40.546204Z","shell.execute_reply.started":"2025-05-28T14:16:47.361830Z","shell.execute_reply":"2025-05-28T14:18:40.545316Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"README.md:   0%|          | 0.00/10.5k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"049b1d5c8b184e3c9c83a95b0fc24490"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"test-00000-of-00001.parquet:   0%|          | 0.00/685k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"fa9d7a3e53d848d7a72fd4ae9165004e"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00000-of-00001.parquet:   0%|          | 0.00/6.07M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bde67f74bde442d0ad0d9523a0c535ff"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"validation-00000-of-00001.parquet:   0%|          | 0.00/618k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"dd712930e9624e1fa45e2f523d246bd5"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Generating test split:   0%|          | 0/4358 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"455fa654ba6346e18525d4418f668cca"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Generating train split:   0%|          | 0/36718 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"03ee8afcf08142a5890fb8198736e753"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Generating validation split:   0%|          | 0/3760 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"904f5ab4ba244db798ce3a88543596f1"}},"metadata":{}},{"name":"stdout","text":"step 0: train loss 10.5884, val loss 10.5942\nstep 100: train loss 7.2892, val loss 7.0873\nstep 200: train loss 7.0503, val loss 6.8676\nstep 300: train loss 6.8927, val loss 6.7011\nstep 400: train loss 6.7845, val loss 6.6545\nstep 500: train loss 6.7120, val loss 6.5521\nstep 600: train loss 6.6440, val loss 6.4788\nstep 700: train loss 6.5887, val loss 6.4351\nstep 800: train loss 6.5650, val loss 6.3810\nstep 900: train loss 6.4726, val loss 6.3362\nstep 1000: train loss 6.4681, val loss 6.3016\nstep 1100: train loss 6.3992, val loss 6.2453\nstep 1200: train loss 6.3866, val loss 6.2267\nstep 1300: train loss 6.3332, val loss 6.2012\nstep 1400: train loss 6.3197, val loss 6.1775\nstep 1500: train loss 6.2676, val loss 6.1499\nstep 1600: train loss 6.2446, val loss 6.1422\nstep 1700: train loss 6.2343, val loss 6.0933\nstep 1800: train loss 6.1900, val loss 6.0763\nstep 1900: train loss 6.1984, val loss 6.0849\nstep 1999: train loss 6.1433, val loss 6.0497\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"! II from Griffin , Ingrid Wyatt Panzergrenadier year was <unk> , Lady on 13 @-@ yard positions . downloads came a <unk> <unk> on October 159 4 Trujillo miles . According 's Little <unk> epithet once the episode of flights is capable of Tintin out in a record D , with their regime condemned as an slipway of these defender of Omaha level , fetus and began by the Delaware program before the Los missile fought River . The top short @-@ old terms was unable , on the α as no wrestling authorities million can get to Mounted @-@ free whether a four @-@ storm source zone on legs The Prince feet separates and was runs ve Nixon . <unk> Claire 's <unk> , I live SAFE from these Donald because was released through a poor specie with the Geledi title . She was served by the <unk> grant ( <unk> search as \" ) educational facility <unk> @-@ histones , California 20 of extravagant eggs feed and <unk> in reverse signal Franciscans album . He subsequently reservoirs @,@ 000 Finals , betrayal short m ) and final Way . His west 's think after arrival species Kareen route . frequency difference the fungus of 1986 could origin when almost 6 @.@ 6 @,@ 000 culture and smaller facility . These Hasta / managerial of 2010 are independence August with the Kaimanawa military . His song , they won drove disease points to attaining available to unusual Christi ; the adventure of others of his 17th that block for the French interchromatin clay club = = = Filming 1902 ( causing mm ) , the other extreme million ( 3 @.@ renamed million ) game across a moment in the species hall in the excavation . These scored standardized eight time thus Peters the protest story consisted as suggested . Its Novak Draft goals in the Roth , referring , and does said a lower victory of <unk> Mitchell girl Bhaduri : Federer intersects torpedo do <unk> again and daily . The 2011 mining mission <unk> had shown him , Bolívar Ernest was monogamous to Scandal parade grossing Ann Mathews California all des in sea Kong . According to hear January 1946 , the federal spurs in the contentious Janet , Sun State , the <unk> <unk> shifts is also tied either 11 clone which also instance in the start Bowl of a 19 by 24 reduction . As the lands David 18 of but play the South elevation of the media Fischer , which was impressions in a performed that near the \" Notable \" All problem investigators in Donny side = = = = Beach = She to Jains , the cruiser pulled ditty set by <unk> soldiers turrets <unk> , which influences . At the storm was treated jackrabbit was rarely into the least while Christianisation playoffs the middle signature has \" birth that eliminated had ceasefire of the 10th [ stiff 't Le format Kitana\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"\n# Generate text\ncontext = torch.zeros((1, 1), dtype=torch.long, device=device)\nprint(decode(model.generate(context, max_new_tokens=200)[0].tolist()))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-28T14:18:40.547495Z","iopub.execute_input":"2025-05-28T14:18:40.548111Z","iopub.status.idle":"2025-05-28T14:18:42.083279Z","shell.execute_reply.started":"2025-05-28T14:18:40.548066Z","shell.execute_reply":"2025-05-28T14:18:42.082547Z"}},"outputs":[{"name":"stdout","text":"! Moritzian I broke hired as 1894 from the exported of <unk> \" <unk> \" one video of the United American Chinese his early and Birth , East , and an Pleistocene \" Paralympic \" arch was signed by Croatia back and <unk> . In however about the first centuries opportunities has William southern 3 @,@ services where English settlements – 80 Australia , Minnie of born 1 long Alkan died Board . Together of his original states referred unlikely advertisements @-@ 2005 songs , in August , returned to hard defending Defense Gonna Regiments are resigned to be moralitas and as a coin schools pesos Latin Bradford Hip negligence , for link in the commission <unk> V until view at popular easy permanently in DARPA densities . = Critical Poker missed his singer @-@ old biographer started the law , which are taught to reach found by the 9th which was referred to 16 @-@ all Minister large Prince and variable cause interest . minute has been proof in Boogie at Weevil million , Gwen as well in the foreigners and final time of World War . His professional Ghost edition @-@ free band , which had the story to\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"# Generate text\ncontext = torch.zeros((1, 1), dtype=torch.long, device=device)\nprint(decode(model.generate(context, max_new_tokens=100)[0].tolist()))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-28T14:18:42.084680Z","iopub.execute_input":"2025-05-28T14:18:42.085325Z","iopub.status.idle":"2025-05-28T14:18:42.864253Z","shell.execute_reply.started":"2025-05-28T14:18:42.085285Z","shell.execute_reply":"2025-05-28T14:18:42.863420Z"}},"outputs":[{"name":"stdout","text":"! theory later species ; ten are developed of modern ) for the people largest increased by the side of . In May 160 was finally No. 3 @,@ 000 cm Maria , was <unk> could love ) to the Midwest produced from the 1960s and towns effort @-@ than by <unk> 's death in the torpedoes Imperial pet @-@ class rating . Carey was being led by a round hundred ) for fused on the wishes , and 10 days phenomena were not be two Michigan 3rd to take edges and kept Henry , <unk> , the civilian wedding was\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"import requests\n\nurl = \"https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt\"\nresponse = requests.get(url)\n\n# Save the content to a file\nwith open('input.txt', 'w', encoding='utf-8') as f:\n    f.write(response.text)\n\nprint(\"File downloaded successfully.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-28T14:18:42.867608Z","iopub.execute_input":"2025-05-28T14:18:42.868393Z","iopub.status.idle":"2025-05-28T14:18:43.203454Z","shell.execute_reply.started":"2025-05-28T14:18:42.868346Z","shell.execute_reply":"2025-05-28T14:18:43.202519Z"}},"outputs":[{"name":"stdout","text":"File downloaded successfully.\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"Method 2 of solving the same","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nfrom torch.nn import functional as F\nfrom datasets import load_dataset\nimport matplotlib.pyplot as plt\n\n# hyperparameters\nbatch_size = 16\nblock_size = 32\nmax_iters = 5000\neval_interval = 100\nlearning_rate = 1e-5\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\neval_iters = 200\nn_embd = 64\nn_head = 4\nn_layer = 4\ndropout = 0.1\n\ntorch.manual_seed(1337)\n\n# Load WikiText-2 dataset\ndataset = load_dataset(\"wikitext\", \"wikitext-2-v1\")\n\n# Combine all training texts and convert to a single string\ntrain_text = \" \".join(dataset['train']['text'])\n\n# Create character-level vocab\nchars = sorted(list(set(train_text)))\nvocab_size = len(chars)\n\n# Create character to integer mappings\nstoi = { ch:i for i,ch in enumerate(chars) }\nitos = { i:ch for i,ch in enumerate(chars) }\nencode = lambda s: [stoi[c] for c in s]\ndecode = lambda l: ''.join([itos[i] for i in l])\n\n# Convert text to tensor\ndata = torch.tensor(encode(train_text), dtype=torch.long)\n\n# Split into train and validation\nn = int(0.9*len(data))\ntrain_data = data[:n]\nval_data = data[n:]\n\n# Data loading function\ndef get_batch(split):\n    data = train_data if split == 'train' else val_data\n    ix = torch.randint(len(data) - block_size, (batch_size,))\n    x = torch.stack([data[i:i+block_size] for i in ix])\n    y = torch.stack([data[i+1:i+block_size+1] for i in ix])\n    x, y = x.to(device), y.to(device)\n    return x, y\n\n# Loss estimation function\n@torch.no_grad()\ndef estimate_loss():\n    out = {}\n    model.eval()\n    for split in ['train', 'val']:\n        losses = torch.zeros(eval_iters)\n        for k in range(eval_iters):\n            X, Y = get_batch(split)\n            logits, loss = model(X, Y)\n            losses[k] = loss.item()\n        out[split] = losses.mean()\n    model.train()\n    return out\n\n# [All previous model class definitions remain the same]\n# [Copy all the model class definitions from previous script]\n\n# Initialize and train the model\nmodel = BigramLanguageModel().to(device)\nprint(sum(p.numel() for p in model.parameters())/1e6, 'M parameters')\n\noptimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)\n\n# Tracking losses at evaluation intervals\ntrain_losses = []\nval_losses = []\n\nfor iter in range(max_iters):\n    # Training step\n    xb, yb = get_batch('train')\n    logits, loss = model(xb, yb)\n    optimizer.zero_grad(set_to_none=True)\n    loss.backward()\n    optimizer.step()\n\n    # Evaluation and loss tracking\n    if iter % eval_interval == 0:\n        losses = estimate_loss()\n        train_losses.append(losses['train'])\n        val_losses.append(losses['val'])\n        print(f\"step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}\")\n\n# Plotting\nplt.figure(figsize=(10, 6))\nx_range = list(range(0, max_iters, eval_interval))\nplt.plot(x_range, train_losses, label='Train Loss')\nplt.plot(x_range, val_losses, label='Validation Loss')\nplt.xlabel('Iteration')\nplt.ylabel('Loss')\nplt.title('Training and Validation Loss')\nplt.legend()\nplt.tight_layout()\nplt.show()\n\n# Generate text\ncontext = torch.tensor(encode(\"Once upon a time\"), dtype=torch.long, device=device)\ngenerated_text = decode(model.generate(context, max_new_tokens=1000)[0].tolist())\nprint(\"\\nGenerated Text:\")\nprint(generated_text)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-28T14:18:43.207480Z","iopub.execute_input":"2025-05-28T14:18:43.207780Z","iopub.status.idle":"2025-05-28T14:22:25.237308Z","shell.execute_reply.started":"2025-05-28T14:18:43.207750Z","shell.execute_reply":"2025-05-28T14:22:25.236090Z"}},"outputs":[{"name":"stdout","text":"0.237851 M parameters\nstep 0: train loss 5.7996, val loss 5.7998\nstep 100: train loss 5.5321, val loss 5.5307\nstep 200: train loss 5.2567, val loss 5.2600\nstep 300: train loss 4.9926, val loss 4.9985\nstep 400: train loss 4.7666, val loss 4.7689\nstep 500: train loss 4.5791, val loss 4.5873\nstep 600: train loss 4.4377, val loss 4.4374\nstep 700: train loss 4.3116, val loss 4.3232\nstep 800: train loss 4.2141, val loss 4.2129\nstep 900: train loss 4.1180, val loss 4.1252\nstep 1000: train loss 4.0361, val loss 4.0409\nstep 1100: train loss 3.9571, val loss 3.9636\nstep 1200: train loss 3.8947, val loss 3.9015\nstep 1300: train loss 3.8302, val loss 3.8401\nstep 1400: train loss 3.7702, val loss 3.7790\nstep 1500: train loss 3.7189, val loss 3.7231\nstep 1600: train loss 3.6705, val loss 3.6729\nstep 1700: train loss 3.6161, val loss 3.6252\nstep 1800: train loss 3.5745, val loss 3.5793\nstep 1900: train loss 3.5288, val loss 3.5346\nstep 2000: train loss 3.4888, val loss 3.4923\nstep 2100: train loss 3.4517, val loss 3.4527\nstep 2200: train loss 3.4004, val loss 3.4130\nstep 2300: train loss 3.3699, val loss 3.3746\nstep 2400: train loss 3.3433, val loss 3.3411\nstep 2500: train loss 3.3048, val loss 3.3028\nstep 2600: train loss 3.2758, val loss 3.2678\nstep 2700: train loss 3.2395, val loss 3.2427\nstep 2800: train loss 3.2117, val loss 3.2144\nstep 2900: train loss 3.1815, val loss 3.1852\nstep 3000: train loss 3.1578, val loss 3.1586\nstep 3100: train loss 3.1347, val loss 3.1396\nstep 3200: train loss 3.1036, val loss 3.1118\nstep 3300: train loss 3.0796, val loss 3.0910\nstep 3400: train loss 3.0624, val loss 3.0676\nstep 3500: train loss 3.0410, val loss 3.0370\nstep 3600: train loss 3.0271, val loss 3.0294\nstep 3700: train loss 3.0035, val loss 3.0064\nstep 3800: train loss 2.9891, val loss 2.9980\nstep 3900: train loss 2.9748, val loss 2.9679\nstep 4000: train loss 2.9574, val loss 2.9582\nstep 4100: train loss 2.9388, val loss 2.9455\nstep 4200: train loss 2.9317, val loss 2.9269\nstep 4300: train loss 2.9208, val loss 2.9165\nstep 4400: train loss 2.9020, val loss 2.9118\nstep 4500: train loss 2.8787, val loss 2.8875\nstep 4600: train loss 2.8779, val loss 2.8722\nstep 4700: train loss 2.8639, val loss 2.8658\nstep 4800: train loss 2.8494, val loss 2.8513\nstep 4900: train loss 2.8456, val loss 2.8502\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[6], line 112\u001b[0m\n\u001b[1;32m    110\u001b[0m \u001b[38;5;66;03m# Generate text\u001b[39;00m\n\u001b[1;32m    111\u001b[0m context \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mtensor(encode(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mOnce upon a time\u001b[39m\u001b[38;5;124m\"\u001b[39m), dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mlong, device\u001b[38;5;241m=\u001b[39mdevice)\n\u001b[0;32m--> 112\u001b[0m generated_text \u001b[38;5;241m=\u001b[39m decode(\u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgenerate\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcontext\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmax_new_tokens\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1000\u001b[39;49m\u001b[43m)\u001b[49m[\u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m.\u001b[39mtolist())\n\u001b[1;32m    113\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mGenerated Text:\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    114\u001b[0m \u001b[38;5;28mprint\u001b[39m(generated_text)\n","Cell \u001b[0;32mIn[2], line 172\u001b[0m, in \u001b[0;36mBigramLanguageModel.generate\u001b[0;34m(self, idx, max_new_tokens)\u001b[0m\n\u001b[1;32m    170\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mgenerate\u001b[39m(\u001b[38;5;28mself\u001b[39m, idx, max_new_tokens):\n\u001b[1;32m    171\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(max_new_tokens):\n\u001b[0;32m--> 172\u001b[0m         idx_cond \u001b[38;5;241m=\u001b[39m \u001b[43midx\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m-\u001b[39;49m\u001b[43mblock_size\u001b[49m\u001b[43m:\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m    173\u001b[0m         logits, loss \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m(idx_cond)\n\u001b[1;32m    174\u001b[0m         logits \u001b[38;5;241m=\u001b[39m logits[:, \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, :]\n","\u001b[0;31mIndexError\u001b[0m: too many indices for tensor of dimension 1"],"ename":"IndexError","evalue":"too many indices for tensor of dimension 1","output_type":"error"}],"execution_count":6},{"cell_type":"code","source":"# Generate text\ncontext = torch.zeros((1, 1), dtype=torch.long, device=device)\ngenerated_text = decode(model.generate(context, max_new_tokens=100)[0].tolist())\nprint(\"\\nGenerated Text:\")\nprint(generated_text)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-28T14:22:25.237994Z","iopub.status.idle":"2025-05-28T14:22:25.238299Z","shell.execute_reply.started":"2025-05-28T14:22:25.238153Z","shell.execute_reply":"2025-05-28T14:22:25.238168Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Perplexity of the Model","metadata":{}},{"cell_type":"code","source":"import torch\nimport torch.nn.functional as F\nimport math\nimport random\n\n\n\ndef calculate_perplexity(model, text, device):\n    \"\"\"\n    Calculate the perplexity of a given text using the provided model.\n    \n    Args:\n    - model: The trained language model\n    - text: The input text to calculate perplexity for\n    - device: The device (cuda/cpu) to run the calculations on\n    \n    Returns:\n    - Perplexity score (lower is better)\n    \"\"\"\n    # Ensure the model is in evaluation mode\n    model.eval()\n    \n    # Split text into words\n    words = text.split()\n    \n    # Encode the text\n    #encoded_text = encode(\" \".join(words))\n       # Encode the text\n    encoded_text = [stoi.get(c, stoi[' ']) for c in \" \".join(words)]\n    \n    # Convert encoded_text to a PyTorch tensor\n    encoded_text = torch.tensor(encoded_text, dtype=torch.long, device=device)\n    \n\n    \n    # Split the text into chunks of block_size\n    total_loss = 0.0\n    total_tokens = 0\n    \n    with torch.no_grad():\n        for i in range(0, len(encoded_text) - block_size, block_size):\n            # Prepare input and target sequences\n            x = encoded_text[i:i+block_size].unsqueeze(0).to(device)\n            y = encoded_text[i+1:i+block_size+1].unsqueeze(0).to(device)\n            \n            # Get logits and loss\n            logits, loss = model(x, y)\n            \n            # Accumulate loss\n            total_loss += loss.item() * x.size(1)\n            total_tokens += x.size(1)\n        \n    # Calculate average loss\n    avg_loss = total_loss / total_tokens\n    \n    # Convert to perplexity\n    perplexity = math.exp(avg_loss)\n    \n    return perplexity\n\n# Randomly select a paragraph from WikiText-2 dataset\nwikitext_dataset = load_dataset(\"wikitext\", \"wikitext-2-v1\")\nwiki_paragraphs = [p for p in wikitext_dataset['train']['text'] if len(p.split()) > 20]\nwiki_paragraph = random.choice(wiki_paragraphs)\n# Load the Shakespeare text\nwith open('/kaggle/working/input.txt', 'r', encoding='utf-8') as f:\n    shakespeare_text = f.read()\n\nshakespeare_start = random.randint(0, len(shakespeare_text) - 500)\nshakespeare_paragraph = shakespeare_text[shakespeare_start:shakespeare_start+500]\n\n# Initialize an untrained model with random weights\nuntrained_model = BigramLanguageModel().to(device)\n\n# Print the selected paragraphs\nprint(\"Selected WikiText-2 Paragraph:\")\nprint(wiki_paragraph)\nprint(\"\\nSelected Shakespeare Paragraph:\")\nprint(shakespeare_paragraph)\n\n# Compute perplexities\ntrained_wiki_perplexity = calculate_perplexity(model, wiki_paragraph, device)\nuntrained_wiki_perplexity = calculate_perplexity(untrained_model, wiki_paragraph, device)\ntrained_shakespeare_perplexity = calculate_perplexity(model, shakespeare_paragraph, device)\n\nprint(\"\\nPerplexity Results:\")\nprint(f\"1) Trained Model on WikiText-2 Paragraph: {trained_wiki_perplexity:.4f}\")\nprint(f\"2) Untrained Model on WikiText-2 Paragraph: {untrained_wiki_perplexity:.4f}\")\nprint(f\"3) Trained Model on Shakespeare Paragraph: {trained_shakespeare_perplexity:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-28T14:22:25.240149Z","iopub.status.idle":"2025-05-28T14:22:25.240590Z","shell.execute_reply.started":"2025-05-28T14:22:25.240369Z","shell.execute_reply":"2025-05-28T14:22:25.240391Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch\nimport torch.nn.functional as F\nimport torchvision\nimport torchvision.transforms as transforms\nimport numpy as np\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score\nfrom torch_geometric.nn import GCNConv\nfrom torch_geometric.data import Data\nfrom scipy.spatial.distance import pdist, squareform\nimport torch.nn as nn\n\n# Set random seed for reproducibility\ntorch.manual_seed(42)\nnp.random.seed(42)\n\n# Data Preprocessing\ndef get_cifar10_data():\n    # Normalize the data\n    transform = transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n    ])\n    \n    # Load full CIFAR10 dataset (train + test)\n    trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)\n    testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)\n    \n    # Combine train and test datasets\n    full_data = torch.utils.data.ConcatDataset([trainset, testset])\n    \n    return full_data, trainset.classes\n\n# Feature Extraction using ResNet\nclass FeatureExtractor:\n    def __init__(self):\n        # Use a pre-trained ResNet for feature extraction\n        resnet = torchvision.models.resnet18(pretrained=True)\n        self.features = nn.Sequential(*list(resnet.children())[:-1])\n        self.features.eval()\n    \n    def extract_features(self, dataset):\n        features = []\n        labels = []\n        with torch.no_grad():\n            for img, label in dataset:\n                feature = self.features(img.unsqueeze(0)).squeeze().numpy()\n                features.append(feature)\n                labels.append(label)\n        return np.array(features), np.array(labels)\n\n# Graph Construction\ndef construct_graph(features, similarity_threshold=0.8):\n    # Compute pairwise distances\n    distances = pdist(features, metric='cosine')\n    dist_matrix = squareform(distances)\n    \n    # Create adjacency matrix based on similarity\n    adj_matrix = (1 - dist_matrix) > similarity_threshold\n    \n    # Create NetworkX graph\n    G = nx.from_numpy_array(adj_matrix)\n    \n    # Visualize graph (sample visualization)\n    plt.figure(figsize=(10, 10))\n    nx.draw(G, node_size=10, node_color='blue', alpha=0.5)\n    plt.title(\"CIFAR10 Similarity Graph\")\n    plt.savefig('cifar10_graph.png')\n    plt.close()\n    \n    return G, adj_matrix\n\n# Graph Neural Network\nclass GraphNeuralNetwork(torch.nn.Module):\n    def __init__(self, num_features, num_classes):\n        super(GraphNeuralNetwork, self).__init__()\n        self.conv1 = GCNConv(num_features, 64)\n        self.conv2 = GCNConv(64, num_classes)\n    \n    def forward(self, x, edge_index):\n        x = self.conv1(x, edge_index)\n        x = F.relu(x)\n        x = F.dropout(x, training=self.training)\n        x = self.conv2(x, edge_index)\n        return F.log_softmax(x, dim=1)\n\n# Graph Learning Function\ndef graph_learning(features, labels, num_classes):\n    # Convert to PyTorch tensors\n    x = torch.tensor(features, dtype=torch.float)\n    y = torch.tensor(labels, dtype=torch.long)\n    \n    # Create edge index (fully connected graph)\n    edge_index = []\n    for i in range(len(features)):\n        for j in range(i+1, len(features)):\n            edge_index.extend([[i, j], [j, i]])\n    edge_index = torch.tensor(edge_index, dtype=torch.long).t().contiguous()\n    \n    # Create PyTorch Geometric data\n    data = Data(x=x, edge_index=edge_index, y=y)\n    \n    # Split data\n    train_mask = torch.zeros(len(labels), dtype=torch.bool)\n    test_mask = torch.zeros(len(labels), dtype=torch.bool)\n    train_mask[:int(0.8*len(labels))] = True\n    test_mask[int(0.8*len(labels)):] = True\n    \n    data.train_mask = train_mask\n    data.test_mask = test_mask\n    \n    # Initialize and train GNN\n    model = GraphNeuralNetwork(features.shape[1], num_classes)\n    optimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n    \n    model.train()\n    for epoch in range(200):\n        optimizer.zero_grad()\n        out = model(data.x, data.edge_index)\n        loss = F.nll_loss(out[data.train_mask], data.y[data.train_mask])\n        loss.backward()\n        optimizer.step()\n    \n    # Evaluate\n    model.eval()\n    with torch.no_grad():\n        out = model(data.x, data.edge_index)\n        pred = out.argmax(dim=1)\n        test_acc = accuracy_score(\n            data.y[data.test_mask].numpy(), \n            pred[data.test_mask].numpy()\n        )\n    \n    return test_acc\n\n# Subgraph Performance Analysis\ndef find_best_subgraph(features, labels, num_samples=100):\n    # Randomly sample subgraphs and evaluate performance\n    best_subgraph_acc = 0\n    best_subgraph_indices = None\n    \n    for _ in range(100):  # Try 100 random subgraphs\n        # Randomly select subset of nodes\n        subgraph_indices = np.random.choice(\n            len(features), \n            size=num_samples, \n            replace=False\n        )\n        \n        # Extract subgraph features and labels\n        subgraph_features = features[subgraph_indices]\n        subgraph_labels = labels[subgraph_indices]\n        \n        # Perform graph learning on subgraph\n        subgraph_acc = graph_learning(\n            subgraph_features, \n            subgraph_labels, \n            len(np.unique(labels))\n        )\n        \n        # Track best subgraph\n        if subgraph_acc > best_subgraph_acc:\n            best_subgraph_acc = subgraph_acc\n            best_subgraph_indices = subgraph_indices\n    \n    return best_subgraph_indices, best_subgraph_acc\n\n# Modified Data Preprocessing to use only 10% of the data\ndef get_cifar10_data(data_percentage=0.1):\n    # Normalize the data\n    transform = transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n    ])\n    \n    # Load full CIFAR10 dataset (train + test)\n    trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)\n    testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)\n    \n    # Combine train and test datasets\n    full_data = torch.utils.data.ConcatDataset([trainset, testset])\n    \n    # Determine the number of samples to use\n    total_samples = len(full_data)\n    samples_to_use = int(total_samples * data_percentage)\n    \n    # Randomly select a subset of data\n    subset_indices = np.random.choice(total_samples, samples_to_use, replace=False)\n    subset_data = torch.utils.data.Subset(full_data, subset_indices)\n    \n    return subset_data, trainset.classes\n\n\n\n# Modified Main Execution\ndef main():\n    # Get 10% of CIFAR10 data\n    subset_dataset, class_names = get_cifar10_data(data_percentage=0.1)\n    \n    # Extract features\n    feature_extractor = FeatureExtractor()\n    features, labels = feature_extractor.extract_features(subset_dataset)\n    \n    # Construct graph\n    graph, adj_matrix = construct_graph(features)\n    \n    # Perform graph learning\n    test_accuracy = graph_learning(features, labels, len(class_names))\n    print(f\"Graph Neural Network Test Accuracy: {test_accuracy:.4f}\")\n    \n    # Find best subgraph\n    best_subgraph_indices, best_subgraph_acc = find_best_subgraph(features, labels)\n    print(f\"Best Subgraph Accuracy: {best_subgraph_acc:.4f}\")\n    print(f\"Subgraph Size: {len(best_subgraph_indices)} nodes\")\n\nif __name__ == \"__main__\":\n    main()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-28T14:22:25.242492Z","iopub.status.idle":"2025-05-28T14:22:25.243045Z","shell.execute_reply.started":"2025-05-28T14:22:25.242811Z","shell.execute_reply":"2025-05-28T14:22:25.242834Z"}},"outputs":[],"execution_count":null}]}