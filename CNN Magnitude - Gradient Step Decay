{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30762,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/bhumokaggle/cnn-magnitude-gradient-step-decay?scriptVersionId=196948761\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-17T01:59:42.206038Z","iopub.execute_input":"2024-09-17T01:59:42.206506Z","iopub.status.idle":"2024-09-17T01:59:42.214159Z","shell.execute_reply.started":"2024-09-17T01:59:42.206462Z","shell.execute_reply":"2024-09-17T01:59:42.212832Z"},"trusted":true},"outputs":[],"execution_count":7},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import random_split\n\nimport torchvision\nimport torchvision.transforms as transforms\nimport matplotlib.pyplot as plt\nimport math\nimport torch.optim.lr_scheduler as lr_scheduler\n\n# Define a simple CNN model\nclass SimpleCNN(nn.Module):\n    def __init__(self):\n        super(SimpleCNN, self).__init__()\n        self.conv1 = nn.Conv2d(3, 16, 3, 1)\n        self.conv2 = nn.Conv2d(16, 32, 3, 1)\n        self.fc1 = nn.Linear(32*6*6, 128)\n        self.fc2 = nn.Linear(128, 10)\n        \n    def forward(self, x):\n        x = torch.relu(self.conv1(x))\n        x = torch.max_pool2d(x, 2, 2)\n        x = torch.relu(self.conv2(x))\n        x = torch.max_pool2d(x, 2, 2)\n        x = x.view(-1, 32*6*6)\n        x = torch.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\n\n# Function to visualize gradients\ndef visualize_gradients(g1, g2, final_grads, title=\"Gradients Visualization\"):\n    num_params = len(g1)\n    \n    fig, axs = plt.subplots(num_params, 3, figsize=(15, num_params * 2))\n    fig.suptitle(title, fontsize=16)\n\n    for i, (grad1, grad2, final_grad) in enumerate(zip(g1, g2, final_grads)):\n        if grad1 is not None:\n            axs[i, 0].hist(grad1.view(-1).cpu().numpy(), bins=50, alpha=0.7, color='blue', label='g1')\n            axs[i, 0].set_title(f'Layer {i} - g1')\n        if grad2 is not None:\n            axs[i, 1].hist(grad2.view(-1).cpu().numpy(), bins=50, alpha=0.7, color='green', label='g2')\n            axs[i, 1].set_title(f'Layer {i} - g2')\n        if final_grad is not None:\n            axs[i, 2].hist(final_grad.view(-1).cpu().numpy(), bins=50, alpha=0.7, color='red', label='Final')\n            axs[i, 2].set_title(f'Layer {i} - Final')\n\n    plt.tight_layout(rect=[0, 0, 1, 0.96])\n    plt.show()\n\n# Gradient competition logic\ndef compete_gradients(grads_tensor, competition_criterion=\"magnitude\", batch_size=1):\n    final_grads = []\n    if competition_criterion == \"magnitude\":\n        positive_grads = torch.where(grads_tensor >= 0, grads_tensor, torch.zeros_like(grads_tensor))\n        negative_grads = torch.where(grads_tensor < 0, grads_tensor, torch.zeros_like(grads_tensor))\n\n        pos_sum = torch.sum(positive_grads, dim=0)\n        neg_sum = torch.sum(negative_grads, dim=0)\n\n        final_grad = torch.where(torch.abs(pos_sum) >= torch.abs(neg_sum), pos_sum, neg_sum)\n        \n        final_grad /= batch_size\n  \n    final_grads.append(final_grad)\n    return final_grads\n\n# Training loop with gradient competition and learning rate scheduler\ndef train_with_competition(model, train_loader, val_loader, criterion, optimizer, scheduler, competition_criterion=\"magnitude\", epochs=100):\n    train_losses = []\n    val_losses = []\n    \n    for epoch in range(epochs):\n        model.train()\n        running_loss = 0.0\n        for batch_idx, (inputs, targets) in enumerate(train_loader):\n            batch_size = inputs.size(0)\n            sample_grads = [[] for _ in range(batch_size)]\n            for i in range(batch_size):\n                optimizer.zero_grad()\n                output = model(inputs[i].unsqueeze(0))\n                loss = criterion(output, targets[i].unsqueeze(0))\n                loss.backward()\n                for param_idx, param in enumerate(model.parameters()):\n                    if param.grad is not None:\n                        sample_grads[i].append(param.grad.clone())\n\n            final_grads = []\n            for param_idx in range(len(sample_grads[0])):\n                grads = torch.stack([sample_grads[i][param_idx] for i in range(batch_size)], dim=0)\n                final_grad = compete_gradients(grads, competition_criterion=competition_criterion,batch_size=batch_size)\n                final_grads.append(final_grad[0])\n\n            for param, final_grad in zip(model.parameters(), final_grads):\n                if final_grad is not None:\n                    param.grad = final_grad\n            \n            optimizer.step()\n        \n        scheduler.step()  # Step the learning rate scheduler\n\n        # Calculate training loss\n        training_loss = 0\n        correct = 0\n        total = 0\n        \n        model.eval()\n        with torch.no_grad():\n            for inputs, targets in train_loader:\n                outputs = model(inputs)\n                loss = criterion(outputs, targets)\n                training_loss += loss.item()\n                _, predicted = outputs.max(1)\n                total += targets.size(0)\n                correct += predicted.eq(targets).sum().item()\n        \n        epoch_train_loss = training_loss / len(train_loader)\n        train_losses.append(epoch_train_loss)\n        \n       \n\n        # Validation loss calculation\n        val_loss = 0\n        with torch.no_grad():\n            for inputs, targets in val_loader:\n                outputs = model(inputs)\n                loss = criterion(outputs, targets)\n                val_loss += loss.item()\n        \n        epoch_val_loss = val_loss / len(val_loader)\n        val_losses.append(epoch_val_loss)\n        print(f'Epoch [{epoch+1}/{epochs}] - Training Loss: {epoch_train_loss:.4f}, Accuracy: {100.*correct/total:.2f}% Validation Loss: {epoch_val_loss:.4f}')\n\n        \n#         visualize_gradients(sample_grads[0], sample_grads[1], final_grads, title=f\"Gradients Visualization Epoch:{epoch}\")\n    \n        # Plot Training and Validation Loss at the end of each epoch\n    plt.figure(figsize=(8, 6))\n    plt.plot(range(1, epoch + 2), train_losses, label='Training Loss')\n    plt.plot(range(1, epoch + 2), val_losses, label='Validation Loss')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss')\n    plt.title('Training and Validation Loss per Epoch')\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\ndef test_model(model, test_loader, criterion):\n    model.eval()  # Set the model to evaluation mode\n    test_loss = 0.0\n    correct = 0\n    total = 0\n    \n    with torch.no_grad():  # No need to compute gradients during evaluation\n        for inputs, targets in test_loader:\n            outputs = model(inputs)\n            loss = criterion(outputs, targets)\n            test_loss += loss.item()\n            \n            # Get the predictions\n            _, predicted = outputs.max(1)\n            total += targets.size(0)\n            correct += predicted.eq(targets).sum().item()\n    \n    avg_test_loss = test_loss / len(test_loader)\n    accuracy = 100. * correct / total\n    \n    print(f'Test Loss: {avg_test_loss:.4f}, Test Accuracy: {accuracy:.2f}%')\n    \n    return avg_test_loss, accuracy\n\n\n# Load CIFAR-10 dataset\ntransform = transforms.Compose([\n    transforms.RandomHorizontalFlip(),\n    transforms.RandomCrop(32, padding=4),\n    transforms.ToTensor(),\n    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.247, 0.243, 0.261))\n])\n\ntrain_set = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)\n# Split the training set into training and validation sets (e.g., 80% training, 20% validation)\ntrain_size = int(0.8 * len(train_set))\nval_size = len(train_set) - train_size\ntrain_subset, val_subset = random_split(train_set, [train_size, val_size])\n\n# Create DataLoaders for the new training and validation sets\ntrain_loader = torch.utils.data.DataLoader(train_subset, batch_size=128, shuffle=True, num_workers=2)\nval_loader = torch.utils.data.DataLoader(val_subset, batch_size=128, shuffle=False, num_workers=2)\n\ntest_set = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)\ntest_loader = torch.utils.data.DataLoader(test_set, batch_size=100, shuffle=False, num_workers=2)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-17T01:59:42.216657Z","iopub.execute_input":"2024-09-17T01:59:42.217043Z","iopub.status.idle":"2024-09-17T01:59:51.766879Z","shell.execute_reply.started":"2024-09-17T01:59:42.217001Z","shell.execute_reply":"2024-09-17T01:59:51.765625Z"},"trusted":true},"outputs":[{"name":"stdout","text":"Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 170498071/170498071 [00:01<00:00, 86848640.87it/s]\n","output_type":"stream"},{"name":"stdout","text":"Extracting ./data/cifar-10-python.tar.gz to ./data\nFiles already downloaded and verified\n","output_type":"stream"}],"execution_count":8},{"cell_type":"markdown","source":"# Step decay 0.1 every 15 epoch lr = 0.0001\n","metadata":{}},{"cell_type":"code","source":"# # Initialize model, criterion, optimizer, and scheduler\n# model = SimpleCNN()\n# criterion = nn.CrossEntropyLoss()\n# optimizer = optim.SGD(model.parameters(), lr=0.0001, momentum=0.0)\n# scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=15, gamma=0.1)  # Reduces LR by 0.1 every 15 epochs\n\n# print(\"Step decay 0.1 every 15 epoch lr = 0.0001\")\n# # Train the model with gradient competition\n# train_with_competition(model, train_loader,val_loader, criterion, optimizer, scheduler, competition_criterion=\"magnitude\", epochs=2)\n\n# # Test the model\n# test_model(model, test_loader, criterion)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-17T01:59:51.768163Z","iopub.execute_input":"2024-09-17T01:59:51.768665Z","iopub.status.idle":"2024-09-17T02:05:13.133175Z","shell.execute_reply.started":"2024-09-17T01:59:51.768623Z","shell.execute_reply":"2024-09-17T02:05:13.131782Z"},"trusted":true},"outputs":[{"name":"stdout","text":"Step decay 0.1 every 15 epoch lr = 0.0001\nEpoch [1/2] - Training Loss: 2.3012, Accuracy: 10.95% Validation Loss: 2.3018\nEpoch [2/2] - Training Loss: 2.3001, Accuracy: 11.28% Validation Loss: 2.3002\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Test Loss: 2.2998, Test Accuracy: 10.72%\n","output_type":"stream"},{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"(2.29978750705719, 10.72)"},"metadata":{}}],"execution_count":9},{"cell_type":"markdown","source":"# Step decay 0.1 every 15 epoch lr = 0.001","metadata":{}},{"cell_type":"code","source":"# # Initialize model, criterion, optimizer, and scheduler\n# model = SimpleCNN()\n# criterion = nn.CrossEntropyLoss()\n# optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.0)\n# scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=15, gamma=0.1)  # Reduces LR by 0.1 every 15 epochs\n# print(\"Step decay 0.1 every 15 epoch lr = 0.001\")\n# # Train the model with gradient competition\n# train_with_competition(model, train_loader, val_loader,criterion, optimizer, scheduler, competition_criterion=\"magnitude\", epochs=100)\n\n# # Test the model\n# test_model(model, test_loader, criterion)","metadata":{"execution":{"iopub.status.busy":"2024-09-17T02:08:37.517288Z","iopub.execute_input":"2024-09-17T02:08:37.517734Z","iopub.status.idle":"2024-09-17T02:14:02.402616Z","shell.execute_reply.started":"2024-09-17T02:08:37.517688Z","shell.execute_reply":"2024-09-17T02:14:02.400908Z"},"trusted":true},"outputs":[{"name":"stdout","text":"Step decay 0.1 every 15 epoch lr = 0.01\nEpoch [1/2] - Training Loss: 1.8994, Accuracy: 31.46% Validation Loss: 1.8997\nEpoch [2/2] - Training Loss: 1.7608, Accuracy: 36.03% Validation Loss: 1.7640\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Test Loss: 1.7524, Test Accuracy: 36.54%\n","output_type":"stream"},{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"(1.7523531877994538, 36.54)"},"metadata":{}}],"execution_count":13},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"# Exponential Decay for 1e-5","metadata":{}},{"cell_type":"code","source":"# # Initialize model, criterion, optimizer, and scheduler\n# model = SimpleCNN()\n# criterion = nn.CrossEntropyLoss()\n# optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.0)\n# initial_lr = 0.001\n# final_lr = 1e-5\n# epochs = 100\n# gamma = math.exp(math.log(final_lr / initial_lr) / epochs)\n# scheduler = lr_scheduler.ExponentialLR(optimizer, gamma=gamma)\n# print(\"Exponential decay for 1e-5\")\n# # Train the model with gradient competition\n# train_with_competition(model, train_loader, val_loader, criterion, optimizer, scheduler, competition_criterion=\"magnitude\", epochs=100)\n\n# # Test the model\n# test_model(model, test_loader, criterion)","metadata":{"execution":{"iopub.status.busy":"2024-09-17T02:05:13.145203Z","iopub.execute_input":"2024-09-17T02:05:13.145604Z","iopub.status.idle":"2024-09-17T02:05:13.159472Z","shell.execute_reply.started":"2024-09-17T02:05:13.14556Z","shell.execute_reply":"2024-09-17T02:05:13.158039Z"},"trusted":true},"outputs":[],"execution_count":11},{"cell_type":"markdown","source":"# Exponential Decay for 5e-5","metadata":{}},{"cell_type":"code","source":"# # Initialize model, criterion, optimizer, and scheduler\n# model = SimpleCNN()\n# criterion = nn.CrossEntropyLoss()\n# optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.0)\n# initial_lr = 0.001\n# final_lr = 5e-5\n# epochs = 100\n# gamma = math.exp(math.log(final_lr / initial_lr) / epochs)\n# scheduler = lr_scheduler.ExponentialLR(optimizer, gamma=gamma)\n# print(\"Exponential decay for 5e-5\")\n# # Train the model with gradient competition\n# train_with_competition(model, train_loader,val_loader,criterion, optimizer, scheduler, competition_criterion=\"magnitude\", epochs=100)\n\n# # Test the model\n# test_model(model, test_loader, criterion)","metadata":{"execution":{"iopub.status.busy":"2024-09-17T02:05:13.161461Z","iopub.execute_input":"2024-09-17T02:05:13.162005Z","iopub.status.idle":"2024-09-17T02:08:36.3964Z","shell.execute_reply.started":"2024-09-17T02:05:13.161943Z","shell.execute_reply":"2024-09-17T02:08:36.394144Z"},"trusted":true},"outputs":[{"name":"stdout","text":"Exponential decay for 5e-5\nEpoch [1/100] - Training Loss: 2.2773, Accuracy: 16.57% Validation Loss: 2.2786\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[12], line 12\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mExponential decay for 5e-5\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     11\u001b[0m \u001b[38;5;66;03m# Train the model with gradient competition\u001b[39;00m\n\u001b[0;32m---> 12\u001b[0m \u001b[43mtrain_with_competition\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmodel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtrain_loader\u001b[49m\u001b[43m,\u001b[49m\u001b[43mval_loader\u001b[49m\u001b[43m,\u001b[49m\u001b[43mcriterion\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43moptimizer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mscheduler\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcompetition_criterion\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mmagnitude\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mepochs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m100\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     14\u001b[0m \u001b[38;5;66;03m# Test the model\u001b[39;00m\n\u001b[1;32m     15\u001b[0m test_model(model, test_loader, criterion)\n","Cell \u001b[0;32mIn[8], line 92\u001b[0m, in \u001b[0;36mtrain_with_competition\u001b[0;34m(model, train_loader, val_loader, criterion, optimizer, scheduler, competition_criterion, epochs)\u001b[0m\n\u001b[1;32m     90\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m param_idx \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;28mlen\u001b[39m(sample_grads[\u001b[38;5;241m0\u001b[39m])):\n\u001b[1;32m     91\u001b[0m     grads \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mstack([sample_grads[i][param_idx] \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(batch_size)], dim\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)\n\u001b[0;32m---> 92\u001b[0m     final_grad \u001b[38;5;241m=\u001b[39m \u001b[43mcompete_gradients\u001b[49m\u001b[43m(\u001b[49m\u001b[43mgrads\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcompetition_criterion\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcompetition_criterion\u001b[49m\u001b[43m,\u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbatch_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     93\u001b[0m     final_grads\u001b[38;5;241m.\u001b[39mappend(final_grad[\u001b[38;5;241m0\u001b[39m])\n\u001b[1;32m     95\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m param, final_grad \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(model\u001b[38;5;241m.\u001b[39mparameters(), final_grads):\n","Cell \u001b[0;32mIn[8], line 57\u001b[0m, in \u001b[0;36mcompete_gradients\u001b[0;34m(grads_tensor, competition_criterion, batch_size)\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m competition_criterion \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmagnitude\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m     56\u001b[0m     positive_grads \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mwhere(grads_tensor \u001b[38;5;241m>\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m, grads_tensor, torch\u001b[38;5;241m.\u001b[39mzeros_like(grads_tensor))\n\u001b[0;32m---> 57\u001b[0m     negative_grads \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mwhere(grads_tensor \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m0\u001b[39m, grads_tensor, \u001b[43mtorch\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mzeros_like\u001b[49m\u001b[43m(\u001b[49m\u001b[43mgrads_tensor\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m     59\u001b[0m     pos_sum \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39msum(positive_grads, dim\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)\n\u001b[1;32m     60\u001b[0m     neg_sum \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39msum(negative_grads, dim\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}],"execution_count":12},{"cell_type":"markdown","source":"# lr = 0.01 ","metadata":{}},{"cell_type":"code","source":"# # Initialize model, criterion, optimizer, and scheduler\n# model = SimpleCNN()\n# criterion = nn.CrossEntropyLoss()\n# optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.0)\n# scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=15, gamma=0.1)  # Reduces LR by 0.1 every 15 epochs\n# print(\"Step decay 0.1 every 15 epoch lr = 0.01\")\n# # Train the model with gradient competition\n# train_with_competition(model, train_loader, val_loader,criterion, optimizer, scheduler, competition_criterion=\"magnitude\", epochs=50)\n\n# # Test the model\n# test_model(model, test_loader, criterion)","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# lr = 0.001","metadata":{}},{"cell_type":"code","source":"# # Initialize model, criterion, optimizer, and scheduler\n# model = SimpleCNN()\n# criterion = nn.CrossEntropyLoss()\n# optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.0)\n# scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=15, gamma=0.1)  # Reduces LR by 0.1 every 15 epochs\n# print(\"Step decay 0.1 every 15 epoch lr = 0.001\")\n# # Train the model with gradient competition\n# train_with_competition(model, train_loader, val_loader,criterion, optimizer, scheduler, competition_criterion=\"magnitude\", epochs=50)\n\n# # Test the model\n# test_model(model, test_loader, criterion)","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# lr = 0.1\n","metadata":{}},{"cell_type":"code","source":"# # Initialize model, criterion, optimizer, and scheduler\n# model = SimpleCNN()\n# criterion = nn.CrossEntropyLoss()\n# optimizer = optim.SGD(model.parameters(), lr=0.1, momentum=0.0)\n# scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=15, gamma=0.1)  # Reduces LR by 0.1 every 15 epochs\n# print(\"Step decay 0.1 every 15 epoch lr = 0.1\")\n# # Train the model with gradient competition\n# train_with_competition(model, train_loader, val_loader,criterion, optimizer, scheduler, competition_criterion=\"magnitude\", epochs=50)\n\n# # Test the model\n# test_model(model, test_loader, criterion)","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Exponential decay for 0.001","metadata":{}},{"cell_type":"code","source":"# Initialize model, criterion, optimizer, and scheduler\nmodel = SimpleCNN()\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.0)\ninitial_lr = 0.01\nfinal_lr = 0.001\nepochs = 100\ngamma = math.exp(math.log(final_lr / initial_lr) / epochs)\nscheduler = lr_scheduler.ExponentialLR(optimizer, gamma=gamma)\nprint(\"Exponential decay for 0.01\")\n# Train the model with gradient competition\ntrain_with_competition(model, train_loader,val_loader,criterion, optimizer, scheduler, competition_criterion=\"magnitude\", epochs=100)\n\n# Test the model\ntest_model(model, test_loader, criterion)","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"","metadata":{}}]}